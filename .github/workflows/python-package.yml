# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# Additionally, it will only deploy to PyPI when a tag is pushed that follows the versioning pattern.

name: Python package

on:
  push:
    branches: [ "main" ]  # Trigger testing on push to main
    tags: 
      - 'v*.*.*'   # Trigger publishing only when a version tag is pushed
  pull_request:
    branches: [ "main" ]  # Trigger testing on pull requests to main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh

    - name: Install dependencies
      run: |
        uv venv
        uv add --dev pytest ruff black
        uv sync  # Sync dependencies with current environment

    - name: Lint with Ruff
      run: |
        # Run Ruff on all files
        uv run ruff check .
        
    - name: Check formatting with Black
      run: |
        # Check if files would be reformatted by Black
        uv run black --check .

    - name: Test with pytest
      run: |
        uv run pytest

  publish:
    # This job will only run when a version tag is pushed.
    runs-on: ubuntu-latest
    needs: build   # Ensure this runs only if the build (and tests) pass
    if: startsWith(github.ref, 'refs/tags/v')  # Only run when a tag is pushed

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.x
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh

    - name: Install dependencies
      run: |
        uv venv
        uv sync  # Sync dependencies with current environment

    - name: Build the package
      run: |
        uv build  # Build source and wheel distribution

    - name: Publish to PyPI
      env:
        PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        uv publish --token $PYPI_API_TOKEN  # Upload to PyPI using UV